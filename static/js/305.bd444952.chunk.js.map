{"version":3,"file":"static/js/305.bd444952.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Close.js","components/ui/SelectMovies/SelectMovies.jsx","components/pages/MoviesTopMain/MoviesTopMainSkeleton.jsx","components/pages/MoviesTopMain/index.js","components/pages/MoviesTopMain/MoviesTopMain.jsx","webpack://movie-portal/./src/components/ui/AddToFavorite/AddToFavorite.module.css?6e2b","components/ui/AddToFavorite/AddToFavorite.jsx","components/ui/AddToFavorite/index.js","components/ui/MoviesCard/index.js","components/ui/MoviesCard/MoviesCard.jsx","components/ui/MoviesList/index.js","components/ui/MoviesList/MoviesList.jsx","webpack://movie-portal/./src/components/ui/MoviesCard/MoviesCard.module.css?9ea0"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","\r\nimport { Box, Button, FormControl, InputLabel, MenuItem, Select, Stack } from '@mui/material'\r\nimport React from 'react'\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { useDispatch } from 'react-redux';\r\nimport { resetQuery, selectQuery } from '../../../features/currentQuerySlice';\r\nimport { useTranslation } from 'react-i18next';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function SelectMovies({\r\n    countriesList,\r\n    genresList,\r\n    ratingFrom,\r\n    ratingTo,\r\n    countries,\r\n    order,\r\n    year,\r\n    genreId,\r\n    }) {\r\n        const { t } = useTranslation();\r\n        const dispatch = useDispatch();\r\n    const ordersList = ['RATING', 'NUM_VOTE']\r\n\r\n    const yearList = new Array(50).fill(null).map( (_, ind) => ({\r\n        title: new Date().getFullYear() - ind, \r\n        value: new Date().getFullYear() - ind\r\n    }))\r\n    const ratingList = new Array(11).fill(null).map( (_, ind) => ({\r\n        title: 10 - ind, \r\n        value: 10 - ind, \r\n        value1: 10 - ind,\r\n    }))\r\n  return (\r\n    <Stack sx={{\r\n        marginTop: '5px',\r\n        marginBottom: '20px',\r\n        flexDirection: {sm: 'column', md: 'row'},\r\n        gap: 1,\r\n    }} >\r\n        <FormControl fullWidth size=\"small\">\r\n            <InputLabel>{t('order')}</InputLabel>\r\n            <Select\r\n                value={order}\r\n                onChange={e => dispatch(selectQuery({order: e.target.value}))}\r\n                label=\"Order\"\r\n            >\r\n                {ordersList.map(order => (\r\n                    <MenuItem key={order} value={order}>{t(order)}</MenuItem>\r\n                ))}\r\n            </Select>\r\n        </FormControl>\r\n\r\n        <FormControl fullWidth size=\"small\">\r\n            <InputLabel>{t('countries')}</InputLabel>\r\n            <Select\r\n                value={countries}\r\n                onChange={e => dispatch(selectQuery({countries: e.target.value}))}\r\n                label=\"Country\"\r\n            >\r\n                {countriesList.map(country => (\r\n                    <MenuItem key={country.id} value={country.id}>{country.country}</MenuItem>\r\n                ))}\r\n            </Select>\r\n        </FormControl>\r\n\r\n\r\n        <FormControl fullWidth size=\"small\">\r\n            <InputLabel>{t('genre')}</InputLabel>\r\n            <Select\r\n                value={genreId}\r\n                onChange={e => dispatch(selectQuery({genreId: e.target.value}))}\r\n                label=\"Genre\"\r\n            >\r\n                {genresList.map(genre => (\r\n                    <MenuItem key={genre.id} value={genre.id}>{genre.genre}</MenuItem>\r\n                ))}\r\n            </Select>\r\n        </FormControl>\r\n        \r\n        <FormControl fullWidth size=\"small\">\r\n            <InputLabel>{t('year')}</InputLabel>\r\n            <Select\r\n                value={year}\r\n                onChange={e => dispatch(selectQuery({year: e.target.value}))}\r\n                label=\"Year\"\r\n            >\r\n                {yearList.map(year => (\r\n                    <MenuItem key={year.title} value={year.value}>{year.title}</MenuItem>\r\n                ))}\r\n            </Select>\r\n        </FormControl>\r\n\r\n        <FormControl fullWidth size=\"small\">\r\n            <InputLabel>{t('ratingFrom')}</InputLabel>\r\n            <Select\r\n                value={ratingFrom}\r\n                onChange={e => dispatch(selectQuery({ratingFrom: e.target.value}))}\r\n                label=\"RatingFrom\"\r\n            >\r\n                {ratingList.map(rating => (\r\n                    <MenuItem key={rating.title} value={rating.value}>{rating.title}</MenuItem>\r\n                ))}\r\n            </Select>\r\n        </FormControl>\r\n\r\n        <FormControl fullWidth size=\"small\">\r\n            <InputLabel>{t('ratingTo')}</InputLabel>\r\n        <Select\r\n                value={ratingTo}\r\n                onChange={e => dispatch(selectQuery({ratingTo: e.target.value}))}\r\n                label=\"RatingTo\"\r\n            >\r\n                {ratingList.map(rating => (\r\n                    <MenuItem key={rating.title} value={rating.value1}>{rating.title}</MenuItem>\r\n                ))}\r\n            </Select>\r\n        </FormControl>\r\n\r\n        <Box>\r\n            <Button onClick={() => dispatch(resetQuery())} variant='outlined' startIcon={<CloseIcon/> }>{t('reset')}</Button>\r\n        </Box>\r\n\r\n    </Stack>\r\n  )\r\n}\r\n\r\n\r\nSelectMovies.propTypes = {\r\n    countriesList: PropTypes.array ,\r\n    genresList: PropTypes.array ,\r\n    ratingFrom: PropTypes.string ,\r\n    ratingTo: PropTypes.string ,\r\n    countries: PropTypes.string ,\r\n    order: PropTypes.string ,\r\n    year: PropTypes.string ,\r\n    genreId: PropTypes.string ,\r\n}","import { Skeleton, Stack, useMediaQuery } from '@mui/material'\r\nimport React from 'react'\r\n\r\nexport default function MoviesTopMainSkeleton() {\r\n    const isMobile = useMediaQuery('(max-width:600px)');\r\n  return (\r\n    <>\r\n    <Stack flexDirection='row' sx={{mt: 2, mb: 2}}>\r\n        <Skeleton \r\n            animation=\"wave\" \r\n            variant=\"rectangular\"                    \r\n            sx={{marginRight: '15px',}}\r\n            height= {isMobile ? '45px' :'32px'} \r\n            width= {isMobile ? '45px' :'40px'}\r\n        />\r\n        <Skeleton \r\n            animation=\"wave\" \r\n            variant=\"rectangular\"                    \r\n            height= '38px' \r\n            width='100px'\r\n        />\r\n    </Stack>\r\n    <Stack>\r\n        <Skeleton \r\n            animation=\"wave\" \r\n            variant=\"rectangular\"   \r\n            height= '35px' \r\n            width='97%'\r\n        />\r\n        {isMobile &&\r\n        <>\r\n        <Skeleton \r\n            animation=\"wave\" \r\n            variant=\"rectangular\"    \r\n            sx={{mt: '5px',}}     \r\n            height= '35px' \r\n            width='97%'\r\n        />\r\n        <Skeleton \r\n            animation=\"wave\" \r\n            variant=\"rectangular\" \r\n            sx={{mt: '5px',}}     \r\n            height= '35px' \r\n            width='97%'\r\n        />\r\n        <Skeleton \r\n            animation=\"wave\" \r\n            variant=\"rectangular\"        \r\n            sx={{mt: '5px',}}     \r\n            height= '35px' \r\n            width='97%'\r\n        />\r\n        <Skeleton \r\n            animation=\"wave\" \r\n            variant=\"rectangular\"        \r\n            sx={{mt: '5px',}}     \r\n            height= '35px' \r\n            width='97%'\r\n        />\r\n        <Skeleton \r\n            animation=\"wave\" \r\n            variant=\"rectangular\"        \r\n            sx={{mt: '5px',}}     \r\n            height= '35px' \r\n            width='97%'\r\n        />\r\n        <Skeleton \r\n            animation=\"wave\" \r\n            variant=\"rectangular\"        \r\n            sx={{mt: '5px',}}     \r\n            height= '35px' \r\n            width='97%'\r\n        />\r\n        <Skeleton \r\n            animation=\"wave\" \r\n            variant=\"rectangular\"        \r\n            sx={{mt: '5px',}}     \r\n            height= '40px' \r\n            width='40%'\r\n        />\r\n        </>\r\n        }\r\n    </Stack>\r\n    <Stack\r\n        direction='row'\r\n        justifyContent='center'\r\n        flexWrap='wrap'\r\n    >   \r\n    {Array(15).fill(null).map((_, ind) =>(\r\n        <Stack key={ind}>\r\n            <Skeleton \r\n                animation=\"wave\" \r\n                variant=\"rectangular\"                    \r\n                sx={{ marginTop: '7px', marginRight: '3px',}}\r\n                height= '322px' \r\n                width='215px'\r\n            />\r\n            <Skeleton \r\n                animation=\"wave\" \r\n                variant=\"text\"                 \r\n            />\r\n            <Skeleton \r\n                animation=\"wave\" \r\n                variant=\"text\"                 \r\n            />  \r\n        </Stack>\r\n    ))}\r\n    </Stack>\r\n\r\n    </>\r\n  )\r\n}\r\n","import MoviesTopMain from \"./MoviesTopMain\";\r\n\r\nexport default MoviesTopMain;","import React, { useEffect, useState } from 'react'\r\nimport { useGetFilmsQuery, useGetGenresAndCountriesQuery } from '../../../services/kinopoiskAPI'\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { Button, Stack, Typography } from '@mui/material';\r\nimport MoviesList from '../../ui/MoviesList';\r\nimport { ArrowBack } from '@mui/icons-material';\r\nimport ErrorMessage from '../../ui/ErrorMessage';\r\nimport { movieTypes } from '../../../constants'\r\nimport { useSelector } from 'react-redux';\r\nimport SelectMovies from '../../ui/SelectMovies/SelectMovies';\r\nimport MoviesTopMainSkeleton from './MoviesTopMainSkeleton';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport default function MoviesTopMain() {\r\n    const { t } = useTranslation(); // Получение функции перевода\r\n  \r\n  const location = useLocation();\r\n  const { countries, order, year, genreId, ratingFrom, ratingTo} = useSelector(\r\n    state => state.currentQuerySlice\r\n  );\r\n  const [page, setPage] = useState(1);\r\n  const navigate = useNavigate();\r\n\r\n  const movieType = movieTypes.find(el => el.url === location.pathname); \r\n  const myGenreId = movieType.url === '/cartoons' ? 18 : genreId;\r\n\r\n  const responseGenresAndCountriesQuery = useGetGenresAndCountriesQuery();   \r\n  const responseFilms = useGetFilmsQuery({\r\n      type: movieType.value,\r\n      genreId: myGenreId,\r\n      countries, order, year, page, ratingFrom, ratingTo\r\n    })\r\n\r\n  useEffect(() => {\r\n    setPage(1);\r\n  }, [location]);\r\n  \r\n    if(responseFilms.error || responseGenresAndCountriesQuery.error) return <ErrorMessage />;\r\n    if (responseFilms.isLoading || responseGenresAndCountriesQuery.isLoading) return <MoviesTopMainSkeleton />;\r\n\r\n  return (\r\n    <>\r\n      <Stack flexDirection='row' sx={{mt: 2, mb: 2}}>\r\n        <Button startIcon={<ArrowBack />} onClick={() => navigate(-1)}  />\r\n        <Typography variant='h5'>{t(movieType.url)}\r\n          \r\n        </Typography>\r\n      </Stack>\r\n      <SelectMovies \r\n        countriesList={responseGenresAndCountriesQuery.data.countries} \r\n        genresList={responseGenresAndCountriesQuery.data.genres} \r\n        ratingFrom={ratingFrom}\r\n        ratingTo={ratingTo}\r\n        countries={countries}\r\n        order={order}\r\n        year={year}\r\n        genreId={genreId}\r\n      />\r\n      <MoviesList \r\n          movies={responseFilms.data.items} \r\n          totalPages={responseFilms.data.totalPages} \r\n          page={page} \r\n          setPage={setPage}\r\n        />\r\n    </>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"favoriteIcon\":\"AddToFavorite_favoriteIcon__vGTwf\"};","import React, { useContext, useEffect, useState } from 'react'\r\nimport AppContext from '../../../context';\r\nimport styles from './AddToFavorite.module.css'\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport { red, grey } from '@mui/material/colors';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport default function AddToFavorite({movie}) {\r\n    const {userItems, movieItems, setMovieItems\r\n    } = useContext(AppContext);\r\n    const { t } = useTranslation();\r\n    const [isFavorite, setIsFavorite] = useState(false);\r\n\r\n      useEffect(() => {\r\n          localStorage.setItem('movieItems', JSON.stringify(movieItems));\r\n      }, [movieItems]);\r\n\r\n      useEffect(() => {\r\n          localStorage.setItem('userItems', JSON.stringify(userItems));\r\n      }, [userItems]);\r\n\r\n    const onAddToFavorite = () => {\r\n      setIsFavorite(!isFavorite)\r\n        try {\r\n            const findItem = movieItems && movieItems.find((item) => item.kinopoiskId === movie.kinopoiskId);\r\n            if (findItem){\r\n                setMovieItems((prev) => prev.filter((item) => item.kinopoiskId !== movie.kinopoiskId));\r\n                }\r\n            else{\r\n                setMovieItems((prev) => [...prev, movie]);\r\n              }\r\n        } \r\n        catch (error) {\r\n            alert(t('likeError'));\r\n            console.error(error);\r\n        };\r\n      };\r\n      const style = movieItems && movieItems.some((item) => item.kinopoiskId === movie.kinopoiskId)\r\n      ?\r\n      { color: red[500] } :\r\n      {color: grey[500] };\r\n      \r\n  return (\r\n    <>\r\n    <FavoriteIcon \r\n    onClick={onAddToFavorite}\r\n    className={styles.favoriteIcon} \r\n    fontSize=\"large\"  \r\n      sx={{\r\n          ...style\r\n        }} \r\n    /> \r\n    </>\r\n  )\r\n}\r\n","import AddToFavorite from \"./AddToFavorite\";\r\n\r\nexport default AddToFavorite;","import MoviesCard from \"./MoviesCard\";\r\n\r\nexport default MoviesCard;","import { Box, Rating, Stack, Tooltip, Link } from '@mui/material'\r\nimport React, { useContext, useEffect } from 'react'\r\nimport { Link as RouterLink} from 'react-router-dom'\r\nimport styles from './MoviesCard.module.css'\r\nimport AddToFavorite from '../AddToFavorite';\r\nimport AppContext from '../../../context';\r\n\r\nexport default function MoviesCard({movie}) {\r\n  const {userItems} = useContext(AppContext);  \r\n\r\n  useEffect(() => {\r\n            localStorage.setItem('userItems', JSON.stringify(userItems));\r\n        }, [userItems]);\r\n  return (\r\n      <Stack alignItems='center' sx={{ position: 'relative' }}>\r\n        {\r\n        userItems.some( user => user.session === true) && <AddToFavorite movie={movie}/>\r\n        }\r\n        <RouterLink to={`/movie/${movie.kinopoiskId || movie.filmId}`} >\r\n          <img  src={movie.posterUrlPreview} alt={movie.nameRu} className={styles.img}/>\r\n        </RouterLink>\r\n        \r\n        <Link component={RouterLink} to={`/movie/${movie.kinopoiskId || movie.filmId}`} className={styles.textTypography}>{movie.nameRu ? movie.nameRu : movie.nameEng }</Link>\r\n        \r\n        {movie.ratingKinopoisk && (\r\n          <Stack>\r\n            <Tooltip title={`${movie.ratingKinopoisk} / 10`}>\r\n              <Box>\r\n                <Rating name='read-only' value={movie.ratingKinopoisk /2} precision={0.1} readOnly/>\r\n              </Box>\r\n            </Tooltip>\r\n          </Stack>\r\n        )}\r\n      </Stack>\r\n  );\r\n}\r\n","import MoviesList from \"./MoviesList\";\r\n\r\nexport default MoviesList;","import { Pagination, Stack } from '@mui/material';\r\nimport React from 'react';\r\nimport MoviesCard from '../MoviesCard';\r\nimport PropTypes from 'prop-types';\r\nexport default function MoviesList({movies, totalPages, page, setPage}) {\r\n  return (\r\n    <>\r\n      <Stack direction='row' justifyContent='center' flexWrap='wrap'>\r\n        {movies.map(movie => (\r\n          <MoviesCard key={movie.kinopoiskId} movie={movie}/>\r\n      \r\n        ))}\r\n      </Stack>\r\n      <Stack alignItems='center'>\r\n      {totalPages > 1 && \r\n        <Pagination \r\n          count={totalPages} \r\n          color=\"primary\" \r\n          variant=\"outlined\" \r\n          size='large' \r\n          page={page}\r\n          onChange={(_ , value) => setPage(value)}\r\n          boundaryCount={2} \r\n        />}\r\n      </Stack>\r\n  </>\r\n  )\r\n}\r\n\r\n\r\nMoviesList.propTypes = {\r\n    totalPages: PropTypes.number,\r\n    page: PropTypes.number,\r\n    setPage: PropTypes.func\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"img\":\"MoviesCard_img__mrpe7\",\"textTypography\":\"MoviesCard_textTypography__eihA1\"};"],"names":["createSvgIcon","_jsx","d","SelectMovies","_ref","countriesList","genresList","ratingFrom","ratingTo","countries","order","year","genreId","t","useTranslation","dispatch","useDispatch","yearList","Array","fill","map","_","ind","title","Date","getFullYear","value","ratingList","value1","_jsxs","Stack","sx","marginTop","marginBottom","flexDirection","sm","md","gap","children","FormControl","fullWidth","size","InputLabel","Select","onChange","e","selectQuery","target","label","MenuItem","country","id","genre","rating","Box","Button","onClick","resetQuery","variant","startIcon","CloseIcon","MoviesTopMainSkeleton","isMobile","useMediaQuery","_Fragment","mt","mb","Skeleton","animation","marginRight","height","width","direction","justifyContent","flexWrap","location","useLocation","useSelector","state","currentQuerySlice","page","setPage","useState","navigate","useNavigate","movieType","movieTypes","find","el","url","pathname","myGenreId","responseGenresAndCountriesQuery","useGetGenresAndCountriesQuery","responseFilms","useGetFilmsQuery","type","useEffect","error","ErrorMessage","isLoading","ArrowBack","Typography","data","genres","MoviesList","movies","items","totalPages","AddToFavorite","movie","userItems","movieItems","setMovieItems","useContext","AppContext","isFavorite","setIsFavorite","localStorage","setItem","JSON","stringify","style","some","item","kinopoiskId","color","red","grey","FavoriteIcon","onAddToFavorite","findItem","prev","filter","alert","console","className","styles","favoriteIcon","fontSize","_objectSpread","alignItems","position","user","session","RouterLink","to","concat","filmId","src","posterUrlPreview","alt","nameRu","img","Link","component","textTypography","nameEng","ratingKinopoisk","Tooltip","Rating","name","precision","readOnly","MoviesCard","Pagination","count","boundaryCount"],"sourceRoot":""}